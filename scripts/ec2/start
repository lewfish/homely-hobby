#!/usr/bin/env python3

from os.path import join
import json
import datetime
import base64

import boto3

mlx_cache_dir = '/Users/lewfish/.mlx/'
user_data = b"""
#!/bin/bash
cd /home/ec2-user/
aws ecr get-login --no-include-email --region us-east-1 | bash
docker pull 279682201306.dkr.ecr.us-east-1.amazonaws.com/raster-vision-gpu-lewfish:pytorch
git clone https://github.com/lewfish/mlx.git
"""
user_data = base64.b64encode(user_data).decode("ascii")

client = boto3.client('ec2', region_name='us-east-1')

response = client.request_spot_instances(
    DryRun=False,
    SpotPrice='0.5',
    InstanceCount=1,
    Type='one-time',
    LaunchSpecification={
        'ImageId': 'ami-0241ac1f637a90b84',
        'KeyName': 'lewfish-raster-vision',
        'InstanceType': 'p2.xlarge',
        'Placement': {
            'AvailabilityZone': 'us-east-1a',
        },
        'IamInstanceProfile': {
            'Arn': 'arn:aws:iam::279682201306:instance-profile/lfishgoldRasterVisionInstanceProfile'
        },
        'SecurityGroupIds': [
            'sg-06984b3d26ba2115e'
        ],
        'BlockDeviceMappings': [
            {
                'DeviceName': '/dev/xvda',
                'Ebs': {
                    'VolumeSize': 100,
                    'DeleteOnTermination': True,
                    'VolumeType': 'gp2',
                    'Encrypted': False
                },
            },
        ],
        'UserData': user_data,
        'EbsOptimized': False,
        'Monitoring': {
            'Enabled': True
        },
    }
)

spot_instance_request_id = response['SpotInstanceRequests'][0]['SpotInstanceRequestId']

print('Waiting for spot request to be fulfilled...')
waiter = client.get_waiter('spot_instance_request_fulfilled')
waiter.wait(SpotInstanceRequestIds=[spot_instance_request_id])
print('Spot request fulfilled!')

instance_id = client.describe_spot_instance_requests(
    SpotInstanceRequestIds=[spot_instance_request_id])['SpotInstanceRequests'][0]['InstanceId']
public_dns = client.describe_instances(InstanceIds=[instance_id])['Reservations'][0]['Instances'][0]['PublicDnsName']

print('Waiting for instance to be running...')
waiter = client.get_waiter('instance_running')
waiter.wait(InstanceIds=[instance_id])
print('Instance is running!')

print('Waiting for instance status to be OK...')
waiter = client.get_waiter('instance_status_ok')
waiter.wait(InstanceIds=[instance_id])
print('Instance status is OK!')

stats = {
    'spot_instance_request_id': spot_instance_request_id,
    'instance_id': instance_id,
    'public_dns': public_dns,
}
with open(join(mlx_cache_dir, 'spot.json'), 'w') as spot_file:
    spot_file.write(json.dumps(stats))

print()
print('ssh -i ~/.aws/lewfish-raster-vision.pem ec2-user@{}'.format(public_dns))
print('\a') # beep

